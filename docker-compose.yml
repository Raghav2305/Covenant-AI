version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: contract_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.21.5
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/contract_ai
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_started
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/contract_ai
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - weaviate
    command: celery -A app.core.celery worker --loglevel=info

  # Celery Flower for Monitoring
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    command: celery -A app.core.celery flower --port=5555

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_MCP_SERVER_URL=http://localhost:3001
    depends_on:
      - backend

  # MCP Server for Database Connections
  mcp-database-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.mcp
    ports:
      - "3001:3001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/contract_ai
      - MCP_SERVER_PORT=3001
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
    command: python -m app.mcp.database_server

  # MCP Server for CRM Integration
  mcp-crm-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.mcp
    ports:
      - "3002:3002"
    environment:
      - CRM_API_URL=${CRM_API_URL}
      - MCP_SERVER_PORT=3002
    volumes:
      - ./backend:/app
    command: python -m app.mcp.crm_server

  # MCP Server for Finance System Integration
  mcp-finance-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.mcp
    ports:
      - "3003:3003"
    environment:
      - FINANCE_API_URL=${FINANCE_API_URL}
      - MCP_SERVER_PORT=3003
    volumes:
      - ./backend:/app
    command: python -m app.mcp.finance_server

volumes:
  postgres_data:
  redis_data:
  weaviate_data:
